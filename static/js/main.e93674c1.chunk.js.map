{"version":3,"sources":["components/List.module.css","Constants.js","components/MissingStats.js","components/List.js","App.js","Actions.js","Reducers.js","Store.js","serviceWorker.js","index.js"],"names":["module","exports","LANG","navigator","language","PERCENT","Intl","NumberFormat","style","minimumFractionDigits","missingMapOf","items","prop","reduce","accum","item","has","set","get","Map","MissingStats","generateProgressBars","array","total","map","key","value","htmlFor","id","max","notFound","this","props","filter","found","totalItems","length","missingTimes","Array","from","sort","reverse","shadowSizes","React","cx","classNames","bind","styles","List","foundIt","event","onFound","currentTarget","dataset","itemName","type","selectAll","percentComplete","curr","Number","list","buttonStyles","name","title","className","data-item-name","onClick","src","imageLink","alt","format","connect","state","fish","dispatch","basename","process","to","path","payload","toggleFound","selectAllItems","exact","fishies","initialFishState","reducers","combineReducers","persistConfig","storage","persistedReducer","persistReducer","store","createStore","persistor","persistStore","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","loading","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e93674c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"List_item__1qYyh\",\"-found\":\"List_-found__21D21\",\"list\":\"List_list__12_ST\"};","export const LANG = navigator.language;\nexport const PERCENT = new Intl.NumberFormat(LANG, {style: 'percent', minimumFractionDigits:0})\n\nexport function missingMapOf(items, prop): Map<string, number> {\n  return items.reduce((accum, item) => {\n    if (accum.has(item[prop])) {\n      return accum.set(item[prop], accum.get(item[prop]) + 1);\n    } else {\n      return accum.set(item[prop], 1);\n    }\n  }, new Map());\n}\n","// @flow\n\nimport type { Item } from '../Types';\n\nimport * as React from 'react';\n\nimport { missingMapOf } from '../Constants';\n\ntype Props = {\n  items: Array<Item>\n};\n\nexport default class MissingStats extends React.Component<Props> {\n\n  generateProgressBars = (array: Array<Array<string | number>>, total: number)\n    : Array<React.Element<'div'>> => {\n    return array.map(([key, value]) => (\n      <div key={key}>\n        <label htmlFor={key}>{key}</label>\n        <progress id={key} max={total} value={value}>{value}</progress>\n      </div>\n    ));\n  };\n\n  render() {\n\n    const notFound = this.props.items.filter(item => item.found === false)\n    const totalItems = notFound.length;\n\n    const missingTimes = Array.from(missingMapOf(notFound, 'time')).sort().reverse();\n    const shadowSizes = Array.from(missingMapOf(notFound, 'shadowSize')).sort();\n\n\n    return (\n      <section>\n        <h1>Remaining Stats</h1>\n        <p>Below is an overview of the times and shadow sizes for fish you haven't caught.</p>\n        <div>\n          <h2>Active Hours</h2>\n          {this.generateProgressBars(missingTimes, totalItems)}\n        </div>\n        <div>\n          <h2>Shadow Size</h2>\n          {this.generateProgressBars(shadowSizes, totalItems)}\n        </div>\n      </section>\n    )\n  }\n}\n","// @flow\n\nimport type { Item } from '../Types';\nimport * as React from 'react';\nimport styles from './List.module.css';\nimport classNames from 'classnames';\nimport { PERCENT } from '../Constants';\nimport MissingStats from \"./MissingStats\";\n\ntype Props = {\n  items: Array<Item>,\n  type: string,\n  onFound: Function,\n  selectAll: Function\n};\n\nconst cx = classNames.bind(styles);\n\nexport default class List extends React.Component<Props> {\n\n  foundIt = (event: SyntheticEvent<HTMLButtonElement>) => {\n    this.props.onFound(event.currentTarget.dataset.itemName, this.props.type);\n  }\n\n  selectAll = () => {\n    this.props.selectAll(this.props.type);\n  }\n\n  render() {\n\n    const completed = this.props.items.reduce((accum, curr) => {\n      return accum  + Number(curr.found);\n    }, 0);\n\n    const percentComplete = (completed / this.props.items.length);\n\n    const list = this.props.items.map(item => {\n      const buttonStyles = cx(styles.item, {\n        [styles['-found']]: item.found\n      });\n\n      // @TODO: Wrap in a form and the stats + completed text in an output\n      return (\n        <li key={item.name}\n        title={item.name}>\n        <button className={buttonStyles}\n          data-item-name={item.name}\n          onClick={this.foundIt}>\n          <img src={item.imageLink} alt={item.name} />\n        </button>\n      </li>\n      )\n    });\n\n    return (\n      <section>\n        <ul className={styles.list}>\n          {list}\n        </ul>\n        <button type=\"button\" onClick={this.selectAll}>Select All</button>\n        <p>Completed: {PERCENT.format(percentComplete)}</p>\n        <MissingStats items={this.props.items} />\n      </section>\n    )\n  }\n}\n","// @flow\n\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport {\n  Link,\n  Route,\n  BrowserRouter as Router,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\n\nimport { selectAllItems, toggleFound } from './Actions';\nimport List from './components/List';\n\nfunction App({ fish, dispatch }) {\n\n  function markAsFound(name, type) {\n    dispatch(toggleFound(name, type));\n  }\n\n  function selectAll(type) {\n    dispatch(selectAllItems(type));\n  }\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n\n      <nav>\n        <ul>\n          <li><Link to=\"/fish\">Fish</Link></li>\n        </ul>\n      </nav>\n\n      <Switch>\n        <Route path=\"/fish\">\n          <List items={fish}\n            type=\"fish\"\n            onFound={markAsFound}\n            selectAll={selectAll}\n            />\n        </Route>\n        <Route exact path=\"/\">\n          <Redirect to=\"/fish\" />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nconst mapStateToProps = state => ({\n  fish: state.fish\n});\n\nexport default connect(\n  mapStateToProps\n)(App);\n","// @flow\n\nexport const TOGGLE_FOUND_ITEM = 'TOGGLE::FOUND_ITEM';\nexport function toggleFound(name: string, type: string) {\n  return {\n    type: TOGGLE_FOUND_ITEM,\n    payload: {\n      name,\n      type\n    }\n  };\n};\n\nexport const SELECT_ALL = 'SELECT::ALL';\nexport function selectAllItems(type: string) {\n  return {\n    type: SELECT_ALL,\n    payload: {\n      type\n    }\n  }\n}\n","// @flow\n\nimport type { FishBased, Item } from './Types';\n\nimport { combineReducers } from 'redux';\nimport Fishies from './things/fish.json';\nimport { TOGGLE_FOUND_ITEM, SELECT_ALL } from './Actions';\n\nconst fishies: Array<Item> = Fishies.map((fish: FishBased) => ({\n  ...fish,\n  found: false\n}));\n\nconst initialFishState = [...fishies];\n\nfunction fish(state = initialFishState, { type, payload }) {\n  switch (type) {\n\n    case TOGGLE_FOUND_ITEM:\n      return state.map((item: Item) => {\n\n          // Guardian statement if it's not the one we want\n          if (payload.name !== item.name) {\n            return item;\n          }\n\n          // Toggle if you have the item or not\n          return {\n            ...item,\n            found: !item.found\n          }\n        });\n\n    case SELECT_ALL:\n      return (payload.type === \"fish\") ? state.map((item: Item) => ({\n        ...item,\n        found: true\n      })) : state;\n    default:\n      return state;\n  }\n}\n\nconst reducers = combineReducers({\n  fish\n});\n\nexport default reducers;\n","import { createStore } from 'redux';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport reducers from './Reducers';\n\nconst persistConfig = {\n  key: 'ac.missing.app',\n  storage\n};\n\nconst persistedReducer = persistReducer(persistConfig, reducers);\n\nexport const store = createStore(persistedReducer);\nexport const persistor = persistStore(store);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport App from './App';\nimport { persistor, store } from './Store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}