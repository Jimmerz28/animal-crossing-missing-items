{"version":3,"sources":["components/List.module.css","Constants.js","components/CatchTimes.js","components/List.js","App.js","Actions.js","Reducers.js","Store.js","serviceWorker.js","index.js"],"names":["module","exports","LANG","navigator","language","PERCENT","Intl","NumberFormat","style","minimumFractionDigits","missingMapOf","items","prop","reduce","accum","item","has","set","get","Map","CatchTimes","generateProgressBars","array","total","map","key","value","htmlFor","id","max","notFound","this","props","filter","found","totalItems","length","shadowSizes","Array","from","missingTimes","React","cx","classNames","bind","styles","List","foundIt","event","onFound","currentTarget","dataset","itemName","type","selectAll","percentComplete","curr","Number","list","buttonStyles","name","title","className","data-item-name","onClick","src","imageLink","alt","header","format","connect","state","fish","dispatch","payload","toggleFound","selectAllItems","fishies","initialFishState","reducers","combineReducers","persistConfig","storage","persistedReducer","persistReducer","store","createStore","persistor","persistStore","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","loading","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.03f12cea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"List_item__1qYyh\",\"-found\":\"List_-found__21D21\",\"list\":\"List_list__12_ST\",\"header\":\"List_header__1TlR9\"};","export const LANG = navigator.language;\nexport const PERCENT = new Intl.NumberFormat(LANG, {style: 'percent', minimumFractionDigits:0})\n\nexport function missingMapOf(items, prop): Map<string, number> {\n  return items.reduce((accum, item) => {\n    if (accum.has(item[prop])) {\n      return accum.set(item[prop], accum.get(item[prop]) + 1);\n    } else {\n      return accum.set(item[prop], 1);\n    }\n  }, new Map());\n}\n","// @flow\n\nimport type { Item } from '../Types';\n\nimport * as React from 'react';\n\nimport { missingMapOf } from '../Constants';\n\ntype Props = {\n  items: Array<Item>\n};\n\nexport default class CatchTimes extends React.Component<Props> {\n\n  generateProgressBars = (array: Array<Array<string | number>>, total: number)\n    : Array<React.Element<'div'>> => {\n    return array.map(([key, value]) => (\n      <div key={key}>\n        <label htmlFor={key}>{key}</label>\n        <progress id={key} max={total} value={value}>{value}</progress>\n      </div>\n    ));\n  };\n\n  render() {\n\n    const notFound = this.props.items.filter(item => item.found === false)\n    const totalItems = notFound.length;\n\n    const shadowSizes = Array.from(missingMapOf(notFound, 'shadowSize'));\n    const missingTimes = Array.from(missingMapOf(notFound, 'time'));\n\n    return (\n      <div>\n        {this.generateProgressBars(missingTimes, totalItems)}\n        {this.generateProgressBars(shadowSizes, totalItems)}\n      </div>\n    )\n  }\n}\n","// @flow\n\nimport type { Item } from '../Types';\nimport * as React from 'react';\nimport styles from './List.module.css';\nimport classNames from 'classnames';\nimport { PERCENT } from '../Constants';\nimport CatchTimes from \"./CatchTimes\";\n\ntype Props = {\n  items: Array<Item>,\n  type: string,\n  onFound: Function,\n  selectAll: Function\n};\n\nconst cx = classNames.bind(styles);\n\nexport default class List extends React.Component<Props> {\n\n  // @TODO: Move grid into its own component\n  // @TODO: Rehydrate store from localstorage\n  foundIt = (event: SyntheticEvent<HTMLButtonElement>) => {\n    this.props.onFound(event.currentTarget.dataset.itemName, this.props.type);\n  }\n\n  selectAll = () => {\n    this.props.selectAll(this.props.type);\n  }\n\n  render() {\n\n    const completed = this.props.items.reduce((accum, curr) => {\n      return accum  + Number(curr.found);\n    }, 0);\n\n    const percentComplete = (completed / this.props.items.length);\n\n    const list = this.props.items.map(item => {\n      const buttonStyles = cx(styles.item, {\n        [styles['-found']]: item.found\n      });\n\n      return (\n        <li key={item.name}\n        title={item.name}>\n        <button className={buttonStyles}\n          data-item-name={item.name}\n          onClick={this.foundIt}>\n          <img src={item.imageLink} alt={item.name} />\n        </button>\n      </li>\n      )\n    });\n\n    return (\n      <section>\n        <h1 className={styles.header}>{this.props.type}</h1>\n        <ul className={styles.list}>\n          {list}\n        </ul>\n        <button type=\"button\" onClick={this.selectAll}>Select All</button>\n        <p>Completed: {PERCENT.format(percentComplete)}</p>\n        <CatchTimes items={this.props.items} />\n      </section>\n    )\n  }\n}\n","// @flow\n\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport List from './components/List';\nimport { toggleFound, selectAllItems } from './Actions';\n\nfunction App({ fish, dispatch }) {\n\n  function markAsFound(name, type) {\n    dispatch(toggleFound(name, type));\n  }\n\n  function selectAll(type) {\n    dispatch(selectAllItems(type));\n  }\n\n  return (\n    <div>\n      <List items={fish}\n        type=\"fish\"\n        onFound={markAsFound}\n        selectAll={selectAll}\n        />\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  fish: state.fish\n});\n\nexport default connect(\n  mapStateToProps\n)(App);\n","// @flow\n\nexport const TOGGLE_FOUND_ITEM = 'TOGGLE::FOUND_ITEM';\nexport function toggleFound(name: string, type: string) {\n  return {\n    type: TOGGLE_FOUND_ITEM,\n    payload: {\n      name,\n      type\n    }\n  };\n};\n\nexport const SELECT_ALL = 'SELECT::ALL';\nexport function selectAllItems(type: string) {\n  return {\n    type: SELECT_ALL,\n    payload: {\n      type\n    }\n  }\n}\n","// @flow\n\nimport type { FishBased, Item } from './Types';\n\nimport { combineReducers } from 'redux';\nimport Fishies from './things/fish.json';\nimport { TOGGLE_FOUND_ITEM, SELECT_ALL } from './Actions';\n\nconst fishies: Array<Item> = Fishies.map((fish: FishBased) => ({\n  ...fish,\n  found: false\n}));\n\nconst initialFishState = [...fishies];\n\nfunction fish(state = initialFishState, { type, payload }) {\n  switch (type) {\n\n    case TOGGLE_FOUND_ITEM:\n      return state.map((item: Item) => {\n\n          // Guardian statement if it's not the one we want\n          if (payload.name !== item.name) {\n            return item;\n          }\n\n          // Toggle if you have the item or not\n          return {\n            ...item,\n            found: !item.found\n          }\n        });\n\n    case SELECT_ALL:\n      return (payload.type === \"fish\") ? state.map((item: Item) => ({\n        ...item,\n        found: true\n      })) : state;\n    default:\n      return state;\n  }\n}\n\nconst reducers = combineReducers({\n  fish\n});\n\nexport default reducers;\n","import { createStore } from 'redux';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport reducers from './Reducers';\n\nconst persistConfig = {\n  key: 'ac.missing.app',\n  storage\n};\n\nconst persistedReducer = persistReducer(persistConfig, reducers);\n\nexport const store = createStore(persistedReducer);\nexport const persistor = persistStore(store);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport App from './App';\nimport { persistor, store } from './Store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}